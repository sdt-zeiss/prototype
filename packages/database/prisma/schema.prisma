generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector] // Used to save and compare embeddings
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String    @unique
  password String
  Post     Post[]
  Comment  Comment[]

  @@map("users")
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title   String
  content String

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  type String

  comments Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  content String

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  @@map("comments")
}

// PG Extension:  https://github.com/pgvector/pgvector
// Example query: SELECT * FROM items ORDER BY embedding <-> '[3,1,2]' LIMIT 5;
// Example on how to insert data with OpenAI: https://github.com/Code42Cate/funding/blob/main/apps/scraper/src/embeddings.ts
// Example insert: INSERT INTO items (embedding) VALUES ('[1,2,3]'), ('[4,5,6]');

model Items {
  id        String                 @id @default(cuid())
  content   String
  embedding Unsupported("vector")?

  @@map("items")
}
