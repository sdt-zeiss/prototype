generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  email      String    @unique @map("email")
  password   String    @map("password")
  name       String?   @map("name")
  ageGroup   String    @default("18-24") @map("age_group")
  profession String    @default("Student") @map("profession")
  type       String    @default("User") @map("type")
  Comment    Comment[]
  Like       Like[]
  Post       Post[]

  @@map("users")
}

model Post {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  title     String    @map("title")
  content   String    @map("content")
  authorId  String    @map("author_id")
  imageId   String?   @map("image_id")
  type      String    @map("type")
  status    String    @default("user_generated") @map("status")
  comments  Comment[]
  likes     Like[]
  author    User      @relation(fields: [authorId], references: [id])

  @@map("posts")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("likes")
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  content   String   @map("content")
  postId    String   @map("post_id")
  authorId  String   @map("author_id")
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Items {
  id        String                 @id @default(cuid())
  content   String
  embedding Unsupported("vector")?

  @@map("items")
}

model langchain_pg_collection {
  uuid                   String                   @id @db.Uuid
  name                   String                   @unique @db.VarChar
  cmetadata              Json?                    @db.Json
  langchain_pg_embedding langchain_pg_embedding[]
}

model langchain_pg_embedding {
  id                      String                   @id @unique(map: "ix_langchain_pg_embedding_id") @db.VarChar
  collection_id           String?                  @map("collection_id") @db.Uuid
  embedding               Unsupported("vector")?   @map("embedding")
  document                String?                  @map("document") @db.VarChar
  cmetadata               Json?                    @map("cmetadata")
  langchain_pg_collection langchain_pg_collection? @relation(fields: [collection_id], references: [uuid], onDelete: Cascade, onUpdate: NoAction)

  @@index([cmetadata(ops: JsonbPathOps)], map: "ix_cmetadata_gin", type: Gin)
}
